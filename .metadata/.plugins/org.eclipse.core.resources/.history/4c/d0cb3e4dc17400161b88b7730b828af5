/*
 * Taxparency
 * (C)TalTek Systems 2014
 */
package com.prima.configuration;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import org.xml.sax.SAXException;

/**
 *
 * @author Soren Kuula
 */
public class Settings {

    private Properties properties;

    private static Settings instance;

    private com.prima.configuration.dom.Root root;

    public static Settings instance() {
        if (instance == null) {
            instance = new Settings();
        }
        return instance;
    }

    public static com.prima.configuration.dom.Root instanceXml() {
        return instance().root;
    }

    private Settings() {
        //readProperties();
        try {
            readXml();
        } catch (JAXBException | SAXException ex) {
            throw new RuntimeException(ex);
        }
    }

    private void readXml() throws JAXBException, SAXException {
        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        Schema schema = schemaFactory.newSchema(getClass().getClassLoader().getResource("settings.xsd"));

        InputStream is = getClass().getClassLoader().getResourceAsStream("settings.xml");
        JAXBContext jaxbContext = JAXBContext.newInstance(com.taltek.configuration.dom.Settings.class);
        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
        jaxbUnmarshaller.setSchema(schema);
        root = (com.prima.configuration.dom.Root) jaxbUnmarshaller.unmarshal(is);
    }

    private String getProperty(String name) {
        String value = properties.getProperty(name);
        if (value == null) {
            throw new NullPointerException("Problem in application.properties file: No value for key " + name);
        }
        return value;
    }

    private boolean getBooleanProperty(String name) {
        String value = getProperty(name);
        return Boolean.parseBoolean(value);
    }

    private int getIntegerProperty(String name) {
        String value = getProperty(name);
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException ex) {
            throw new RuntimeException("In Settings.properties, the value for key " + name + " must an integer number!");
        }
    }

    /*
     public boolean forex_useFallbackConversions() {
     return getBooleanProperty("FOREX.USE_FAILBACK_CONVERSIONS");
     }
     */
    public boolean forex_useFallbackFailureUnitConversion() {
        return Settings.instanceXml().getForex().isUseFailbackFailureUnitConversation();
    }

    public int forex_getMaxNumberOfFallbackDays() {
        return Settings.instanceXml().getForex().getMaxNumFallbackDays();
    }

    public boolean dataConsistency_areDuplicateBookingsFatal() {
        return Settings.instanceXml().getDataconsistency().isDuplicateBookingsFatal();
    }

    public boolean dataConsistency_areCrossFIBookingsFatal() {
        return Settings.instanceXml().getDataconsistency().isCrossFiTransactionsFatal();
    }

    public boolean tuning_useStagingDAOCache() {
        return Settings.instanceXml().getTuning().isUseStagingDaoCache();
    }

    public boolean tuning_useMultithreadedTaxCalculation() {
        return Settings.instanceXml().getTuning().isUseMultithreadedTaxCalculations();
    }

    public int tuning_getNumberOfThreadsForTaxCalculation() {
        return Settings.instanceXml().getTuning().getMultithreadedTaxCalculationsThreads();
    }

    /*
     public boolean tuning_ShortcutEmptyTaxCalculations() {
     return getBooleanProperty("TUNING.SHORTCUT_EMPTY_CALCULATIONS");
     }
     */
    public int tuning_getStagingBookingWindowSize() {
        return Settings.instanceXml().getTuning().getStagingBookingWindowSize();
    }

    public final boolean calculation_useTimeInsensitiveConfiguration() {
        return Settings.instanceXml().getCalculation().isTimeInsensitiveConfiguration();
    }

    public E_TaxYearInclusion calculation_dateSelectionForCGLInclusion() {
        return E_TaxYearInclusion.valueOf(Settings.instanceXml().getCalculation().getCglTaxYearInclusion());
    }

    public E_TaxYearInclusion calculation_dateSelectionForIncomeInclusion() {
        return E_TaxYearInclusion.valueOf(Settings.instanceXml().getCalculation().getIncomeTaxYearInclusion());
    }

    public E_TaxYearInclusion calculation_dateSelectionForFeesInclusion() {
        return E_TaxYearInclusion.valueOf(Settings.instanceXml().getCalculation().getFeesTaxYearInclusion());
    }

    public boolean calculation_saveResultDetails() {
        return Settings.instanceXml().getCalculation().isSaveDetails();
    }

    public String login_authentication_type() {
        return Settings.instanceXml().getLogin().getAuthenticationType();
    }
    
    public String calculation_pdfSignCertificateFileName() {
      return Settings.instanceXml().getCalculation().getPdfSignCertificateFileName();
    }
    
    public String calculation_pdfSignPassword() {
      return Settings.instanceXml().getCalculation().getPdfSignPassword();
    }
}
